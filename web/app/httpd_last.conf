ServerName              localhost
ServerAdmin             root@localhost
ServerRoot              /apache
User                    www-data
Group                   www-data
PidFile                 logs/httpd.pid

ServerTokens            Prod
UseCanonicalName        On
TraceEnable             Off

Timeout                 10
MaxRequestWorkers       100

Listen                  0.0.0.0:80
Listen                  0.0.0.0:443

LoadModule              mpm_event_module        modules/mod_mpm_event.so
LoadModule              unixd_module            modules/mod_unixd.so


LoadModule              log_config_module       modules/mod_log_config.so
LoadModule              logio_module            modules/mod_logio.so
LoadModule        	rewrite_module          	modules/mod_rewrite.so

LoadModule              authn_core_module       modules/mod_authn_core.so
LoadModule              authz_core_module       modules/mod_authz_core.so

LoadModule              unique_id_module        modules/mod_unique_id.so
LoadModule        	headers_module          modules/mod_headers.so
LoadModule        	security2_module        modules/mod_security2.so

LoadModule        	proxy_module            modules/mod_proxy.so
LoadModule        	proxy_http_module       modules/mod_proxy_http.so
LoadModule        	proxy_balancer_module   modules/mod_proxy_balancer.so
LoadModule        	lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
LoadModule        	slotmem_shm_module      modules/mod_slotmem_shm.so

ErrorLogFormat          "[%{cu}t] [%-m:%-l] %-a %-L %M"

LogFormat "%h %{GEOIP_COUNTRY_CODE}e %>s %U %u [%{%Y-%m-%d %H:%M:%S}t.%{msec_frac}t%{%z}t] \"%r\" %>s %b \
\"%{Referer}i\" \"%{User-Agent}i\" %v %A %p %R %{BALANCER_WORKER_ROUTE}e %X \"%{cookie}n\" \
%{UNIQUE_ID}e %I %O %{ratio}n%% \
%D %{ModSecTimeIn}e %{ApplicationTime}e %{ModSecTimeOut}e \
%{ModSecAnomalyScoreIn}e %{ModSecAnomalyScoreOut}e %{ModSecMessage}e %{ModSecNoticeAnomalyScore}e %{ModSecFullRequest}e [%{ModSecErrorMsg}e] " extended


LogFormat "[%{%Y-%m-%d %H:%M:%S}t.%{msec_frac}t] %{UNIQUE_ID}e %D \
PerfModSecInbound: %{TX.perf_modsecinbound}M \
PerfAppl: %{TX.perf_application}M \
PerfModSecOutbound: %{TX.perf_modsecoutbound}M \
TS-Phase1: %{TX.ModSecTimestamp1start}M-%{TX.ModSecTimestamp1end}M \
TS-Phase2: %{TX.ModSecTimestamp2start}M-%{TX.ModSecTimestamp2end}M \
TS-Phase3: %{TX.ModSecTimestamp3start}M-%{TX.ModSecTimestamp3end}M \
TS-Phase4: %{TX.ModSecTimestamp4start}M-%{TX.ModSecTimestamp4end}M \
TS-Phase5: %{TX.ModSecTimestamp5start}M-%{TX.ModSecTimestamp5end}M \
Perf-Phase1: %{PERF_PHASE1}M \
Perf-Phase2: %{PERF_PHASE2}M \
Perf-Phase3: %{PERF_PHASE3}M \
Perf-Phase4: %{PERF_PHASE4}M \
Perf-Phase5: %{PERF_PHASE5}M \
Perf-ReadingStorage: %{PERF_SREAD}M \
Perf-WritingStorage: %{PERF_SWRITE}M \
Perf-GarbageCollection: %{PERF_GC}M \
Perf-ModSecLogging: %{PERF_LOGGING}M \
Perf-ModSecCombined: %{PERF_COMBINED}M" perflog





LogLevel                debug
ErrorLog                logs/error.log
CustomLog        	logs/access.log extended

# For this log, a condition is added to the end of this line: Only when the write_perflog environment variable is set will this log file actually be written.
CustomLog               logs/modsec-perf.log perflog env=write_perflog



# == ModSec Base Configuration

# SecRuleEngine is what enables ModSecurity in the first place
SecRuleEngine                 On

# Enable access to the request body and set two limit: Inspecting the body and thus the content of the request, and limit the size of the request body to 10 MB
SecRequestBodyAccess          On
SecRequestBodyLimit           10000000

# For requests with body, but without file upload, such as an online form, we then specify 64 KB as the limit
SecRequestBodyNoFilesLimit    64000

# On the response side we enable body access and in turn define a limit of 10 MB
SecResponseBodyAccess         On
SecResponseBodyLimit          10000000

# memory reserved for the PCRE library, 100000 matches
SecPcreMatchLimit             100000
SecPcreMatchLimitRecursion    100000

# ModSecurity requires three directories for data storage. We put all of them in the tmp directory. For productive operation this is of course the wrong place
SecTmpDir                     /tmp/
SecUploadDir                  /tmp/
SecDataDir                    /tmp/

# ModSecurity has a very detailed debug log. The configurable log level ranges from 0 to 9. 
# We leave it at 0 and are prepared to be able to increase it when problems occur in order to see exactly how the module is working
SecDebugLog                   /apache/logs/modsec_debug.log
SecDebugLogLevel              0

# In addition to the actual rule engine, an audit engine also runs within ModSecurity. 
# It organizes the logging of requests. Because in case of attack we would like to get as much information as possible.
# With SecAuditEngine RelevantOnly we define that only relevant requests should be logged
SecAuditEngine                RelevantOnly
# Whatâ€™s relevant to us: All requests whose HTTP status begins with 4 or 5, but not 404
SecAuditLogRelevantStatus     "^(?:5|4(?!04))"
# It then continues with a definition of the parts of this request that should be logged.
# request header (part B), the request body (part I), the response header (part F) and the response body (part E). 
# Then comes additional information from ModSecurity (parts A, H, K, Z) and details about uploaded files, which we do not map completely (part J)
SecAuditLogParts              ABEFHIJKZ


# Depending on request, a large volume of data is written to the audit log. There are often several hundred lines for each request. 
# On a server under a heavy load with many simultaneous requests this can cause problems writing the file. This is why the Concurrent 
# Log Format was introduced. It keeps a central audit log including the most important information
SecAuditLogType               Concurrent
SecAuditLog                   /apache/logs/modsec_audit.log
SecAuditLogStorageDir         /apache/logs/audit/

# denotes the basic setting of a security rule
# Although we can define this value for each rule, it is normal to work with one default value which 
# is then inherited by all of the rules. ModSecurity is aware of five phasesi
# Phase 1: once the request headers have arrived on the server
# Phase 2: request body phase
# Phase 3: response header phase
# Phase 4: response body phase
# Phase 5: logging phase

# We then say that when a rule takes effect we would normally like the request to pass. 
# We will be defining blocking measures separately. We would like to log; 
# meaning that we would like to see a message about the triggered rule in the Apache server's 
# error log and ultimately assign each of these log entries a tag. 
# The tag set, Local Lab Service, is only one example of the strings, even several of them, that can be set. 
# In a larger company it can for example be useful for adding additional information about a service
# (contract number, customer contact details, references to documentation, etc.)
SecDefaultAction              "phase:1,pass,log,tag:'Local Lab Service'"



# == ModSec Rule ID Namespace Definition
# Service-specific before Core-Rules:    10000 -  49999
# Service-specific after Core-Rules:     50000 -  79999
# Locally shared rules:                  80000 -  99999
#  - Performance:                        90000 -  90199
# Recommended ModSec Rules (few):       200000 - 200010
# OWASP Core-Rules:                     900000 - 999999

# Each ModSecurity rule has a number for identification. In order to keep the rules manageable, it is useful to cleanly divide up the namespace
# The OWASP ModSecurity Core Rule Set project provides a basic set of over 200 ModSecurity rules


# === ModSec timestamps at the start of each phase (ids: 90000 - 90009)

SecAction "id:90000,phase:1,nolog,pass,setvar:TX.ModSecTimestamp1start=%{DURATION}"
SecAction "id:90001,phase:2,nolog,pass,setvar:TX.ModSecTimestamp2start=%{DURATION}"
SecAction "id:90002,phase:3,nolog,pass,setvar:TX.ModSecTimestamp3start=%{DURATION}"
SecAction "id:90003,phase:4,nolog,pass,setvar:TX.ModSecTimestamp4start=%{DURATION}"
SecAction "id:90004,phase:5,nolog,pass,setvar:TX.ModSecTimestamp5start=%{DURATION}"
                      
# SecRule REQUEST_FILENAME "@beginsWith /" \
#    "id:90005,phase:5,t:none,nolog,noauditlog,pass,setenv:write_perflog"



# === ModSec Recommended Rules (in modsec src package) (ids: 200000-200010)

SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
  "id:200000,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

SecRule REQUEST_HEADERS:Content-Type "application/json" \
  "id:200001,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

SecRule REQBODY_ERROR "!@eq 0" \
  "id:200002,phase:2,t:none,deny,status:400,log,\
  msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
  "id:200003,phase:2,t:none,deny,status:403,log, \
  msg:'Multipart request body failed strict validation: \
  PE %{REQBODY_PROCESSOR_ERROR}, \
  BQ %{MULTIPART_BOUNDARY_QUOTED}, \
  BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
  DB %{MULTIPART_DATA_BEFORE}, \
  DA %{MULTIPART_DATA_AFTER}, \
  HF %{MULTIPART_HEADER_FOLDING}, \
  LF %{MULTIPART_LF_LINE}, \
  SM %{MULTIPART_MISSING_SEMICOLON}, \
  IQ %{MULTIPART_INVALID_QUOTING}, \
  IP %{MULTIPART_INVALID_PART}, \
  IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
  FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

SecRule TX:/^MSC_/ "!@streq 0" \
  "id:200005,phase:2,t:none,deny,status:500,\
  msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"



# === ModSec Core Rules Base Configuration (ids: 900000-900999)

Include    /apache/conf/crs/crs-setup.conf

SecAction "id:900110,phase:1,pass,nolog,\
  setvar:tx.inbound_anomaly_score_threshold=1000,\
  setvar:tx.outbound_anomaly_score_threshold=1000"

SecAction "id:900000,phase:1,pass,nolog,\
  setvar:tx.paranoia_level=1"


# === ModSec Core Rules: Runtime Exclusion Rules (ids: 10000-49999)

# ...


# === ModSecurity Core Rules Inclusion

Include    /apache/conf/crs/rules/*.conf


# === ModSec Core Rules: Config Time Exclusion Rules (no ids)

# ...


# === ModSec Timestamps at the End of Each Phase (ids: 90010 - 90019)

SecAction "id:90010,phase:1,pass,nolog,setvar:TX.ModSecTimestamp1end=%{DURATION}"
SecAction "id:90011,phase:2,pass,nolog,setvar:TX.ModSecTimestamp2end=%{DURATION}"
SecAction "id:90012,phase:3,pass,nolog,setvar:TX.ModSecTimestamp3end=%{DURATION}"
SecAction "id:90013,phase:4,pass,nolog,setvar:TX.ModSecTimestamp4end=%{DURATION}"
SecAction "id:90014,phase:5,pass,nolog,setvar:TX.ModSecTimestamp5end=%{DURATION}"


# === ModSec performance calculations and variable export (ids: 90100 - 90199)

SecAction "id:90100,phase:5,pass,nolog,\
  setvar:TX.perf_modsecinbound=%{PERF_PHASE1},\
  setvar:TX.perf_modsecinbound=+%{PERF_PHASE2},\
  setvar:TX.perf_application=%{TX.ModSecTimestamp3start},\
  setvar:TX.perf_application=-%{TX.ModSecTimestamp2end},\
  setvar:TX.perf_modsecoutbound=%{PERF_PHASE3},\
  setvar:TX.perf_modsecoutbound=+%{PERF_PHASE4},\
  setenv:ModSecTimeIn=%{TX.perf_modsecinbound},\
  setenv:ApplicationTime=%{TX.perf_application},\
  setenv:ModSecTimeOut=%{TX.perf_modsecoutbound},\
  setenv:ModSecAnomalyScoreIn=%{TX.anomaly_score},\
  setenv:ModSecAnomalyScoreOut=%{TX.outbound_anomaly_score},\
  setenv:ModSecMessage=%{TX.msg},\
  setenv:ModSecNoticeAnomalyScore=%{TX.notice_anomaly_score},\
  setenv:ModSecFullRequest=%{FULL_REQUEST},\
  setenv:ModSecErrorMsg=%{WEBSERVER_ERROR_LOG},\
  setenv:ModSecTest=%{TX.0}"



# === ModSec finished


<VirtualHost 0.0.0.0:80>
	ProxyRequests Off
	# This directive actually means forwarding requests to servers on the internet, even if the name indicates a general setting. 
	# As mentioned before, the directive is correctly set for Apache 2.4 and it is only being mentioned here to guard against questions or incorrect settings in the future.

	ProxyTimeout            60
	ProxyPreserveHost       On
	ProxyErrorOverride      On

	# There are many ways for instructing Apache to forward a request to a backend application. 
	# The most common way of proxying requests is based on the ProxyPass directive. It is used as follows
	# Set proxy rules for accepted URL that are ok being forwarded to the backend server
	#ProxyPass          /admin !

	# The most important directive is ProxyPass. It defines a /service1 path and specifies how it is mapped to the backend: 
	# To the service defined above running on our own host, localhost, on port 8000.
	ProxyPass          /service1/admin !
	ProxyPass          /service1    http://localhost:8080/
	# On the next line comes a related directive that despite having a similar name performs only a small auxiliary function.
	ProxyPassReverse   /service1    http://localhost:8080/


	# Add rewrite rules to change the URL requested to a valid URL
	RewriteEngine           On
	RewriteOptions          InheritDownBefore
	# We tell the server to instruct the client to send a new request to /index.html for a request without a path or a request for "/" respectively. This is a redirect
	#RewriteRule           ^/$    %{REQUEST_SCHEME}://%{HTTP_HOST}/login  [redirect,last]
	RewriteEngine    On

    	RewriteRule        ^/service1/(.*)        http://localhost:8080/service1/$1 [proxy,last]
    	ProxyPassReverse    /                      http://localhost:8080/

    	<Proxy http://localhost:8080/service1>

    	Require all granted

    	Options None

    	</Proxy>

	# Proxy stanza
	# the Proxy block where the connection to the backend is more precisely defined
	# this is where requests are authenticated and authorized
	# These are called containers. Containers specify to the web server how to structure the work
</VirtualHost>

DocumentRoot            /apache/htdocs

<Directory />

    Require all denied

    Options SymLinksIfOwnerMatch

</Directory>

